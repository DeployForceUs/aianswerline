# –í–µ—Ä—Å–∏—è 1.1 (2025-07-15)
# ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ asyncpg
# ‚úÖ –∫–æ–º–∞–Ω–¥–∞ /list –¥–µ–ª–∞–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# ‚úÖ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –≤—ã–≤–æ–¥–æ–º –≤ Telegram
# ‚úÖ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ .env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ DB_*

import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import asyncpg

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("TELEGRAM_ADMIN_ID"))

DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASS = os.getenv("DB_PASS")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

@dp.message(Command("list"))
async def handle_list(message: Message):
    try:
        await message.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: /list\n‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...")

        conn = await asyncpg.connect(
            host=DB_HOST,
            port=DB_PORT,
            user=DB_USER,
            password=DB_PASS,
            database=DB_NAME
        )

        rows = await conn.fetch("SELECT id, phone, created_at FROM users ORDER BY id DESC LIMIT 10;")
        await conn.close()

        if not rows:
            await message.answer("‚ùóÔ∏è–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ `users`.")
            return

        reply = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for row in rows:
            reply += f"üÜî <code>{row['id']}</code>\nüì± <code>{row['phone']}</code>\nüïí <code>{row['created_at']}</code>\n\n"

        await message.answer(reply)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<code>{str(e)}</code>")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

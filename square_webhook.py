# –í–µ—Ä—Å–∏—è 1.1.0 (2025-07-05)
# –ü—Ä–∏–Ω–∏–º–∞–µ–º Square Webhook, –ø–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä, –Ω–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ Postgres

from fastapi import APIRouter, Request
import asyncpg
import os
import logging

router = APIRouter()

DB_URL = os.getenv("DATABASE_URL")  # –ø—Ä–∏–º–µ—Ä: postgres://user:pass@host:port/db

@router.post("/square-webhook")
async def square_webhook(request: Request):
    try:
        payload = await request.json()
        logging.info(f"Square Webhook payload: {payload}")

        # ‚ö†Ô∏è –¢—É—Ç –ø–æ–¥—Å—Ç–∞–≤—å –ø—É—Ç—å –∫ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –µ—Å–ª–∏ custom_field, —Ç–æ —Ç–∞–∫:
        phone_number = payload.get("data", {}).get("object", {}).get("payment", {}).get("note", "")
        amount_money = payload.get("data", {}).get("object", {}).get("payment", {}).get("amount_money", {}).get("amount", 0)

        if not phone_number:
            return {"error": "No phone number found in webhook"}

        # üí∞ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞—á–∏—Å–ª–∏—Ç—å (–¥–æ–ª–ª–∞—Ä—ã -> —Ç–æ–∫–µ–Ω—ã)
        tokens_to_add = int(amount_money) // 100  # –¥–æ–ø—É—Å—Ç–∏–º 1 –¥–æ–ª–ª–∞—Ä = 1 —Ç–æ–∫–µ–Ω

        conn = await asyncpg.connect(DB_URL)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await conn.fetchrow("SELECT id FROM users WHERE phone_number = $1", phone_number)
        if not user:
            await conn.close()
            return {"error": f"User with phone {phone_number} not found"}

        user_id = user["id"]

        # –ó–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
        await conn.execute(
            "INSERT INTO tokens_log (user_id, change, source, description) VALUES ($1, $2, $3, $4)",
            user_id, tokens_to_add, "square", f"Payment received via Square"
        )

        await conn.close()
        return {"status": "ok", "tokens_added": tokens_to_add}

    except Exception as e:
        logging.exception("Error processing Square webhook")
        return {"error": str(e)}

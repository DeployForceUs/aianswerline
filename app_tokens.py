# –í–µ—Ä—Å–∏—è 2.0 (2025-07-02)
# ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É
# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –±–∞–∑–µ twilio
# ‚úÖ –í—ã–¥–∞—á–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
# ‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∑–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
# ‚úÖ –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Twilio SMS
# ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–∏ 0 —Ç–æ–∫–µ–Ω–æ–≤
# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π endpoint /chat –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

import os
import psycopg2
from flask import Flask, request, Response
from dotenv import load_dotenv
from twilio.twiml.messaging_response import MessagingResponse
from openai import OpenAI
from datetime import datetime

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv(dotenv_path="/var/www/aianswerline/api/.env")

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI ===
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
conn = psycopg2.connect(
    dbname="twilio",
    user="twilio",
    password="SuperSecret",
    host="172.18.0.2",
    port="5432"
)
conn.autocommit = True
cur = conn.cursor()

# === Flask ===
app = Flask(__name__)

@app.route("/twilio-hook", methods=["POST"])
def twilio_hook():
    from_number = request.form.get("From")
    body = request.form.get("Body")

    print(f"[Twilio SMS] üì© From {from_number}: {body}")

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    cur.execute("SELECT id, tokens_balance FROM users WHERE phone_number = %s", (from_number,))
    row = cur.fetchone()

    if row:
        user_id, tokens = row
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        cur.execute("""
            INSERT INTO users (phone_number, verification_code, is_verified, tokens_balance, created_at)
            VALUES (%s, %s, %s, %s, %s) RETURNING id
        """, (from_number, '000000', True, 2, datetime.utcnow()))
        user_id = cur.fetchone()[0]
        tokens = 2
        cur.execute("""
            INSERT INTO tokens_log (user_id, change, source, description, created_at)
            VALUES (%s, %s, %s, %s, %s)
        """, (user_id, 2, 'system', 'Initial 2 tokens for new user', datetime.utcnow()))

    # === –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç ===
    if tokens <= 0:
        response = MessagingResponse()
        response.message("‚ö†Ô∏è You've run out of tokens.\nBuy more here:\nhttps://yourdomain.com/pay")
        return Response(str(response), mimetype="application/xml")

    # === –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ ===
    cur.execute("""
        UPDATE users SET tokens_balance = tokens_balance - 1 WHERE id = %s
    """, (user_id,))
    cur.execute("""
        INSERT INTO tokens_log (user_id, change, source, description, created_at)
        VALUES (%s, %s, %s, %s, %s)
    """, (user_id, -1, 'chat', f"Message: {body[:50]}", datetime.utcnow()))

    # === GPT-4 –û–±—Ä–∞–±–æ—Ç–∫–∞ ===
    try:
        completion = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": body}
            ]
        )
        gpt_response = completion.choices[0].message.content.strip()
    except Exception as e:
        print("[OpenAI ERROR]:", e)
        gpt_response = "Sorry, there was an error generating a response."

    # === –û—Ç–≤–µ—Ç Twilio ===
    response = MessagingResponse()
    response.message(gpt_response)
    return Response(str(response), mimetype="application/xml")

@app.route("/twilio-status", methods=["POST"])
def twilio_status():
    print("[Twilio STATUS] üì°", request.form.to_dict())
    return ('', 204)

# === –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ curl ===
@app.route("/chat", methods=["POST"])
def chat():
    phone = request.form.get("phone_number")
    msg = request.form.get("message")

    print(f"[TEST CHAT] üì≤ {phone}: {msg}")

    response = MessagingResponse()
    response.message(f"Mock response to your message: {msg}")
    return Response(str(response), mimetype="application/xml")
